{"ast":null,"code":"'use strict';\n\nvar pluralize = require('pluralize');\n\nvar normalize = require('normalize-strings');\n\nvar problematic = require('./problematic.json');\n\nmodule.exports = syllables;\nvar own = {}.hasOwnProperty; // Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\n\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(['awe($|d|so)', 'cia(?:l|$)', 'tia', 'cius', 'cious', '[^aeiou]giu', '[aeiouy][^aeiouy]ion', 'iou', 'sia$', 'eous$', '[oa]gue$', '.[^aeiuoycgltdb]{2,}ed$', '.ely$', '^jua', 'uai', 'eau', '^busi$', '(?:[aeiouy](?:' + ['[bcfgklmnprsvwxyz]', 'ch', 'dg', 'g[hn]', 'lch', 'l[lv]', 'mm', 'nch', 'n[cgn]', 'r[bcnsv]', 'squ', 's[chkls]', 'th'].join('|') + ')ed$)', '(?:[aeiouy](?:' + ['[bdfklmnprstvy]', 'ch', 'g[hn]', 'lch', 'l[lv]', 'mm', 'nch', 'nn', 'r[nsv]', 'squ', 's[cklst]', 'th'].join('|') + ')es$)'].join('|'), 'g');\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp('[aeiouy](?:' + ['[bcdfgklmnprstvyz]', 'ch', 'dg', 'g[hn]', 'l[lv]', 'mm', 'n[cgn]', 'r[cnsv]', 'squ', 's[cklst]', 'th'].join('|') + ')e$', 'g'); // Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\n\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp('(?:' + ['([^aeiouy])\\\\1l', '[^aeiouy]ie(?:r|s?t)', '[aeiouym]bl', 'eo', 'ism', 'asm', 'thm', 'dnt', 'snt', 'uity', 'dea', 'gean', 'oa', 'ua', 'react?', 'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n'eings?', '[aeiouy]sh?e[rs]'].join('|') + ')$', 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(['creat(?!u)', '[^gq]ua[^auieo]', '[aeiou]{3}', '^(?:ia|mc|coa[dglx].)', '^re(app|es|im|us)'].join('|'), 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(['[^aeiou]y[ae]', '[^l]lien', 'riet', 'dien', 'iu', 'io', 'ii', 'uen', '[aeilotu]real', 'real[aeilotu]', 'iell', 'eo[^aeiou]', '[aeiou]y[aeiou]'].join('|'), 'g');\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/; // Expression to match single syllable pre- and suffixes.\n\nvar EXPRESSION_SINGLE = new RegExp(['^(?:' + ['un', 'fore', 'ware', 'none?', 'out', 'post', 'sub', 'pre', 'pro', 'dis', 'side', 'some'].join('|') + ')', '(?:' + ['ly', 'less', 'some', 'ful', 'ers?', 'ness', 'cians?', 'ments?', 'ettes?', 'villes?', 'ships?', 'sides?', 'ports?', 'shires?', 'tion(?:ed|s)?'].join('|') + ')$'].join('|'), 'g'); // Expression to match double syllable pre- and suffixes.\n\nvar EXPRESSION_DOUBLE = new RegExp(['^' + '(?:' + ['above', 'anti', 'ante', 'counter', 'hyper', 'afore', 'agri', 'infra', 'intra', 'inter', 'over', 'semi', 'ultra', 'under', 'extra', 'dia', 'micro', 'mega', 'kilo', 'pico', 'nano', 'macro', 'somer'].join('|') + ')', '(?:fully|berry|woman|women|edly)$'].join('|'), 'g'); // Expression to match triple syllable suffixes.\n\nvar EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g; // Expression to split on word boundaries.\n\nvar SPLIT = /\\b/g; // Expression to merge elision.\n\nvar APOSTROPHE = /['â€™]/g; // Expression to remove non-alphabetic characters from a given value.\n\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g; // Wrapper to support multiple word-parts (GH-11).\n\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().replace(APOSTROPHE, '').split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n\n  return total;\n} // Get syllables in a given value.\n\n\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n\n  if (value.length === 0) {\n    return count;\n  } // Return early when possible.\n\n\n  if (value.length < 3) {\n    return 1;\n  } // If `value` is a hard to count, it might be in `problematic`.\n\n\n  if (own.call(problematic, value)) {\n    return problematic[value];\n  } // Additionally, the singular word might be in `problematic`.\n\n\n  singular = pluralize(value, 1);\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular];\n  }\n\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1); // Count some prefixes and suffixes, and remove their matched ranges.\n\n  value = value.replace(EXPRESSION_TRIPLE, countFactory(3)).replace(EXPRESSION_DOUBLE, countFactory(2)).replace(EXPRESSION_SINGLE, countFactory(1)); // Count multiple consonants.\n\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  } // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n\n\n  value.replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne).replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne); // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n\n  value.replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne).replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne); // Make sure at least on is returned.\n\n  return count || 1; // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter removes the matched value from the input.\n\n  function countFactory(addition) {\n    return counter;\n\n    function counter() {\n      count += addition;\n      return '';\n    }\n  } // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter does not remove the matched value from the input.\n\n\n  function returnFactory(addition) {\n    return returner;\n\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/antontuominen/Desktop/NovelApp/react_novel/node_modules/syllable/index.js"],"names":["pluralize","require","normalize","problematic","module","exports","syllables","own","hasOwnProperty","EXPRESSION_MONOSYLLABIC_ONE","RegExp","join","EXPRESSION_MONOSYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_ONE","EXPRESSION_DOUBLE_SYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_THREE","EXPRESSION_DOUBLE_SYLLABIC_FOUR","EXPRESSION_SINGLE","EXPRESSION_DOUBLE","EXPRESSION_TRIPLE","SPLIT","APOSTROPHE","EXPRESSION_NONALPHABETIC","value","values","String","toLowerCase","replace","split","length","index","total","syllable","count","singular","parts","addOne","subtractOne","call","returnFactory","countFactory","addition","counter","returner","$0"],"mappings":"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","sourcesContent":["'use strict'\n\nvar pluralize = require('pluralize')\nvar normalize = require('normalize-strings')\nvar problematic = require('./problematic.json')\n\nmodule.exports = syllables\n\nvar own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  [\n    'awe($|d|so)',\n    'cia(?:l|$)',\n    'tia',\n    'cius',\n    'cious',\n    '[^aeiou]giu',\n    '[aeiouy][^aeiouy]ion',\n    'iou',\n    'sia$',\n    'eous$',\n    '[oa]gue$',\n    '.[^aeiuoycgltdb]{2,}ed$',\n    '.ely$',\n    '^jua',\n    'uai',\n    'eau',\n    '^busi$',\n    '(?:[aeiouy](?:' +\n      [\n        '[bcfgklmnprsvwxyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'n[cgn]',\n        'r[bcnsv]',\n        'squ',\n        's[chkls]',\n        'th'\n      ].join('|') +\n      ')ed$)',\n    '(?:[aeiouy](?:' +\n      [\n        '[bdfklmnprstvy]',\n        'ch',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'nn',\n        'r[nsv]',\n        'squ',\n        's[cklst]',\n        'th'\n      ].join('|') +\n      ')es$)'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy](?:' +\n    [\n      '[bcdfgklmnprstvyz]',\n      'ch',\n      'dg',\n      'g[hn]',\n      'l[lv]',\n      'mm',\n      'n[cgn]',\n      'r[cnsv]',\n      'squ',\n      's[cklst]',\n      'th'\n    ].join('|') +\n    ')e$',\n  'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(?:' +\n    [\n      '([^aeiouy])\\\\1l',\n      '[^aeiouy]ie(?:r|s?t)',\n      '[aeiouym]bl',\n      'eo',\n      'ism',\n      'asm',\n      'thm',\n      'dnt',\n      'snt',\n      'uity',\n      'dea',\n      'gean',\n      'oa',\n      'ua',\n      'react?',\n      'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'eings?',\n      '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  [\n    'creat(?!u)',\n    '[^gq]ua[^auieo]',\n    '[aeiou]{3}',\n    '^(?:ia|mc|coa[dglx].)',\n    '^re(app|es|im|us)'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  [\n    '[^aeiou]y[ae]',\n    '[^l]lien',\n    'riet',\n    'dien',\n    'iu',\n    'io',\n    'ii',\n    'uen',\n    '[aeilotu]real',\n    'real[aeilotu]',\n    'iell',\n    'eo[^aeiou]',\n    '[aeiou]y[aeiou]'\n  ].join('|'),\n  'g'\n)\n\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nvar EXPRESSION_SINGLE = new RegExp(\n  [\n    '^(?:' +\n      [\n        'un',\n        'fore',\n        'ware',\n        'none?',\n        'out',\n        'post',\n        'sub',\n        'pre',\n        'pro',\n        'dis',\n        'side',\n        'some'\n      ].join('|') +\n      ')',\n    '(?:' +\n      [\n        'ly',\n        'less',\n        'some',\n        'ful',\n        'ers?',\n        'ness',\n        'cians?',\n        'ments?',\n        'ettes?',\n        'villes?',\n        'ships?',\n        'sides?',\n        'ports?',\n        'shires?',\n        'tion(?:ed|s)?'\n      ].join('|') +\n      ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nvar EXPRESSION_DOUBLE = new RegExp(\n  [\n    '^' +\n      '(?:' +\n      [\n        'above',\n        'anti',\n        'ante',\n        'counter',\n        'hyper',\n        'afore',\n        'agri',\n        'infra',\n        'intra',\n        'inter',\n        'over',\n        'semi',\n        'ultra',\n        'under',\n        'extra',\n        'dia',\n        'micro',\n        'mega',\n        'kilo',\n        'pico',\n        'nano',\n        'macro',\n        'somer'\n      ].join('|') +\n      ')',\n    '(?:fully|berry|woman|women|edly)$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match triple syllable suffixes.\nvar EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n// Expression to split on word boundaries.\nvar SPLIT = /\\b/g\n\n// Expression to merge elision.\nvar APOSTROPHE = /['â€™]/g\n\n// Expression to remove non-alphabetic characters from a given value.\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g\n\n// Wrapper to support multiple word-parts (GH-11).\nfunction syllables(value) {\n  var values = normalize(String(value))\n    .toLowerCase()\n    .replace(APOSTROPHE, '')\n    .split(SPLIT)\n  var length = values.length\n  var index = -1\n  var total = 0\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''))\n  }\n\n  return total\n}\n\n// Get syllables in a given value.\nfunction syllable(value) {\n  var count = 0\n  var index\n  var length\n  var singular\n  var parts\n  var addOne\n  var subtractOne\n\n  if (value.length === 0) {\n    return count\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value]\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  singular = pluralize(value, 1)\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular]\n  }\n\n  addOne = returnFactory(1)\n  subtractOne = returnFactory(-1)\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1))\n\n  // Count multiple consonants.\n  parts = value.split(/[^aeiouy]+/)\n  index = -1\n  length = parts.length\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n  // Make sure at least on is returned.\n  return count || 1\n\n  // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter removes the matched value from the input.\n  function countFactory(addition) {\n    return counter\n    function counter() {\n      count += addition\n      return ''\n    }\n  }\n\n  // Define scoped counters, to be used in `String#replace()` calls.\n  // The scoped counter does not remove the matched value from the input.\n  function returnFactory(addition) {\n    return returner\n    function returner($0) {\n      count += addition\n      return $0\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}